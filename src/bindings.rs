/* automatically generated by rust-bindgen 0.59.2 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const EMACS_MAJOR_VERSION: u32 = 27;
pub const EMACS_LIMB_MAX: i32 = -1;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
  pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
  pub __bindgen_padding_0: u64,
  pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
  assert_eq!(
    ::std::mem::size_of::<max_align_t>(),
    32usize,
    concat!("Size of: ", stringify!(max_align_t))
  );
  assert_eq!(
    ::std::mem::align_of::<max_align_t>(),
    16usize,
    concat!("Alignment of ", stringify!(max_align_t))
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(max_align_t),
      "::",
      stringify!(__clang_max_align_nonce1)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(max_align_t),
      "::",
      stringify!(__clang_max_align_nonce2)
    )
  );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
  pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
  assert_eq!(
    ::std::mem::size_of::<__fsid_t>(),
    8usize,
    concat!("Size of: ", stringify!(__fsid_t))
  );
  assert_eq!(
    ::std::mem::align_of::<__fsid_t>(),
    4usize,
    concat!("Alignment of ", stringify!(__fsid_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__fsid_t),
      "::",
      stringify!(__val)
    )
  );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
  pub tm_sec: ::std::os::raw::c_int,
  pub tm_min: ::std::os::raw::c_int,
  pub tm_hour: ::std::os::raw::c_int,
  pub tm_mday: ::std::os::raw::c_int,
  pub tm_mon: ::std::os::raw::c_int,
  pub tm_year: ::std::os::raw::c_int,
  pub tm_wday: ::std::os::raw::c_int,
  pub tm_yday: ::std::os::raw::c_int,
  pub tm_isdst: ::std::os::raw::c_int,
  pub tm_gmtoff: ::std::os::raw::c_long,
  pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
  assert_eq!(
    ::std::mem::size_of::<tm>(),
    56usize,
    concat!("Size of: ", stringify!(tm))
  );
  assert_eq!(
    ::std::mem::align_of::<tm>(),
    8usize,
    concat!("Alignment of ", stringify!(tm))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_sec)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_min)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_hour)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_mday)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_mon)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_year)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_wday)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_yday)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_isdst)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_gmtoff)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(tm),
      "::",
      stringify!(tm_zone)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
  pub tv_sec: __time_t,
  pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
  assert_eq!(
    ::std::mem::size_of::<timespec>(),
    16usize,
    concat!("Size of: ", stringify!(timespec))
  );
  assert_eq!(
    ::std::mem::align_of::<timespec>(),
    8usize,
    concat!("Alignment of ", stringify!(timespec))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(timespec),
      "::",
      stringify!(tv_sec)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(timespec),
      "::",
      stringify!(tv_nsec)
    )
  );
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
  pub it_interval: timespec,
  pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
  assert_eq!(
    ::std::mem::size_of::<itimerspec>(),
    32usize,
    concat!("Size of: ", stringify!(itimerspec))
  );
  assert_eq!(
    ::std::mem::align_of::<itimerspec>(),
    8usize,
    concat!("Alignment of ", stringify!(itimerspec))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(itimerspec),
      "::",
      stringify!(it_interval)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(itimerspec),
      "::",
      stringify!(it_value)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
  _unused: [u8; 0],
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
  pub __locales: [*mut __locale_data; 13usize],
  pub __ctype_b: *const ::std::os::raw::c_ushort,
  pub __ctype_tolower: *const ::std::os::raw::c_int,
  pub __ctype_toupper: *const ::std::os::raw::c_int,
  pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
  assert_eq!(
    ::std::mem::size_of::<__locale_struct>(),
    232usize,
    concat!("Size of: ", stringify!(__locale_struct))
  );
  assert_eq!(
    ::std::mem::align_of::<__locale_struct>(),
    8usize,
    concat!("Alignment of ", stringify!(__locale_struct))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__locale_struct),
      "::",
      stringify!(__locales)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(__locale_struct),
      "::",
      stringify!(__ctype_b)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(__locale_struct),
      "::",
      stringify!(__ctype_tolower)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(__locale_struct),
      "::",
      stringify!(__ctype_toupper)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(__locale_struct),
      "::",
      stringify!(__names)
    )
  );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
  pub fn clock() -> clock_t;
}
extern "C" {
  pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
  pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
  pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
  pub fn strftime(
    __s: *mut ::std::os::raw::c_char,
    __maxsize: size_t,
    __format: *const ::std::os::raw::c_char,
    __tp: *const tm,
  ) -> size_t;
}
extern "C" {
  pub fn strftime_l(
    __s: *mut ::std::os::raw::c_char,
    __maxsize: size_t,
    __format: *const ::std::os::raw::c_char,
    __tp: *const tm,
    __loc: locale_t,
  ) -> size_t;
}
extern "C" {
  pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
  pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
  pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
  pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
  pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn asctime_r(
    __tp: *const tm,
    __buf: *mut ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn ctime_r(
    __timer: *const time_t,
    __buf: *mut ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
  pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
  pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
  pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
  pub fn tzset();
}
extern "C" {
  pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
  pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
  pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
  pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
  pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nanosleep(
    __requested_time: *const timespec,
    __remaining: *mut timespec,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn clock_nanosleep(
    __clock_id: clockid_t,
    __flags: ::std::os::raw::c_int,
    __req: *const timespec,
    __rem: *mut timespec,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn timer_create(
    __clock_id: clockid_t,
    __evp: *mut sigevent,
    __timerid: *mut timer_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn timer_settime(
    __timerid: timer_t,
    __flags: ::std::os::raw::c_int,
    __value: *const itimerspec,
    __ovalue: *mut itimerspec,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type emacs_env = emacs_env_27;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_value_tag {
  _unused: [u8; 0],
}
pub type emacs_value = *mut emacs_value_tag;
pub const emacs_variadic_function: ::std::os::raw::c_int = -2;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_runtime {
  pub size: isize,
  pub private_members: *mut emacs_runtime_private,
  pub get_environment:
    ::std::option::Option<unsafe extern "C" fn(ert: *mut emacs_runtime) -> *mut emacs_env>,
}
#[test]
fn bindgen_test_layout_emacs_runtime() {
  assert_eq!(
    ::std::mem::size_of::<emacs_runtime>(),
    24usize,
    concat!("Size of: ", stringify!(emacs_runtime))
  );
  assert_eq!(
    ::std::mem::align_of::<emacs_runtime>(),
    8usize,
    concat!("Alignment of ", stringify!(emacs_runtime))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_runtime>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_runtime),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_runtime>())).private_members as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_runtime),
      "::",
      stringify!(private_members)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_runtime>())).get_environment as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_runtime),
      "::",
      stringify!(get_environment)
    )
  );
}
pub const emacs_funcall_exit_emacs_funcall_exit_return: emacs_funcall_exit = 0;
pub const emacs_funcall_exit_emacs_funcall_exit_signal: emacs_funcall_exit = 1;
pub const emacs_funcall_exit_emacs_funcall_exit_throw: emacs_funcall_exit = 2;
pub type emacs_funcall_exit = ::std::os::raw::c_uint;
pub const emacs_process_input_result_emacs_process_input_continue: emacs_process_input_result = 0;
pub const emacs_process_input_result_emacs_process_input_quit: emacs_process_input_result = 1;
pub type emacs_process_input_result = ::std::os::raw::c_uint;
pub type emacs_limb_t = size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_25 {
  pub size: isize,
  pub private_members: *mut emacs_env_private,
  pub make_global_ref: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, any_reference: emacs_value) -> emacs_value,
  >,
  pub free_global_ref:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, global_reference: emacs_value)>,
  pub non_local_exit_check:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
  pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
  pub non_local_exit_get: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      non_local_exit_symbol_out: *mut emacs_value,
      non_local_exit_data_out: *mut emacs_value,
    ) -> emacs_funcall_exit,
  >,
  pub non_local_exit_signal: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      non_local_exit_symbol: emacs_value,
      non_local_exit_data: emacs_value,
    ),
  >,
  pub non_local_exit_throw: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
  >,
  pub make_function: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      min_arity: isize,
      max_arity: isize,
      function: ::std::option::Option<
        unsafe extern "C" fn(
          env: *mut emacs_env,
          nargs: isize,
          args: *mut emacs_value,
          arg1: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
      >,
      documentation: *const ::std::os::raw::c_char,
      data: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub funcall: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      function: emacs_value,
      nargs: isize,
      args: *mut emacs_value,
    ) -> emacs_value,
  >,
  pub intern: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      symbol_name: *const ::std::os::raw::c_char,
    ) -> emacs_value,
  >,
  pub type_of: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
  >,
  pub is_not_nil:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> bool>,
  pub eq: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
  >,
  pub extract_integer: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> intmax_t,
  >,
  pub make_integer: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: intmax_t) -> emacs_value,
  >,
  pub extract_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> f64>,
  pub make_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: f64) -> emacs_value>,
  pub copy_string_contents: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      value: emacs_value,
      buffer: *mut ::std::os::raw::c_char,
      size_inout: *mut isize,
    ) -> bool,
  >,
  pub make_string: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      contents: *const ::std::os::raw::c_char,
      length: isize,
    ) -> emacs_value,
  >,
  pub make_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
      ptr: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub get_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value) -> *mut ::std::os::raw::c_void,
  >,
  pub set_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value, ptr: *mut ::std::os::raw::c_void),
  >,
  pub get_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      env: *mut emacs_env,
      uptr: emacs_value,
    ) -> ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        env: *mut emacs_env,
        uptr: emacs_value,
      ),
    >,
  >,
  pub set_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      uptr: emacs_value,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ),
  >,
  pub vec_get: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize) -> emacs_value,
  >,
  pub vec_set: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize, val: emacs_value),
  >,
  pub vec_size:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value) -> isize>,
}
#[test]
fn bindgen_test_layout_emacs_env_25() {
  assert_eq!(
    ::std::mem::size_of::<emacs_env_25>(),
    232usize,
    concat!("Size of: ", stringify!(emacs_env_25))
  );
  assert_eq!(
    ::std::mem::align_of::<emacs_env_25>(),
    8usize,
    concat!("Alignment of ", stringify!(emacs_env_25))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).private_members as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(private_members)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_global_ref as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).free_global_ref as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(free_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_check as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_check)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_clear as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_clear)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_get as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_signal as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_signal)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_throw as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_throw)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_function as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_function)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).funcall as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(funcall)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).intern as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(intern)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).type_of as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(type_of)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).is_not_nil as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(is_not_nil)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).eq as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(eq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).extract_integer as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(extract_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_integer as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).extract_float as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(extract_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_float as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).copy_string_contents as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(copy_string_contents)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_string as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_string)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_user_ptr as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).get_user_ptr as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(get_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).set_user_ptr as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(set_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).get_user_finalizer as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(get_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).set_user_finalizer as *const _ as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(set_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_get as *const _ as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(vec_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_set as *const _ as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(vec_set)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_size as *const _ as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(vec_size)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_26 {
  pub size: isize,
  pub private_members: *mut emacs_env_private,
  pub make_global_ref: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, any_reference: emacs_value) -> emacs_value,
  >,
  pub free_global_ref:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, global_reference: emacs_value)>,
  pub non_local_exit_check:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
  pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
  pub non_local_exit_get: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      non_local_exit_symbol_out: *mut emacs_value,
      non_local_exit_data_out: *mut emacs_value,
    ) -> emacs_funcall_exit,
  >,
  pub non_local_exit_signal: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      non_local_exit_symbol: emacs_value,
      non_local_exit_data: emacs_value,
    ),
  >,
  pub non_local_exit_throw: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
  >,
  pub make_function: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      min_arity: isize,
      max_arity: isize,
      function: ::std::option::Option<
        unsafe extern "C" fn(
          env: *mut emacs_env,
          nargs: isize,
          args: *mut emacs_value,
          arg1: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
      >,
      documentation: *const ::std::os::raw::c_char,
      data: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub funcall: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      function: emacs_value,
      nargs: isize,
      args: *mut emacs_value,
    ) -> emacs_value,
  >,
  pub intern: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      symbol_name: *const ::std::os::raw::c_char,
    ) -> emacs_value,
  >,
  pub type_of: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
  >,
  pub is_not_nil:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> bool>,
  pub eq: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
  >,
  pub extract_integer: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> intmax_t,
  >,
  pub make_integer: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: intmax_t) -> emacs_value,
  >,
  pub extract_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> f64>,
  pub make_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: f64) -> emacs_value>,
  pub copy_string_contents: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      value: emacs_value,
      buffer: *mut ::std::os::raw::c_char,
      size_inout: *mut isize,
    ) -> bool,
  >,
  pub make_string: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      contents: *const ::std::os::raw::c_char,
      length: isize,
    ) -> emacs_value,
  >,
  pub make_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
      ptr: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub get_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value) -> *mut ::std::os::raw::c_void,
  >,
  pub set_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value, ptr: *mut ::std::os::raw::c_void),
  >,
  pub get_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      env: *mut emacs_env,
      uptr: emacs_value,
    ) -> ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        env: *mut emacs_env,
        uptr: emacs_value,
      ),
    >,
  >,
  pub set_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      uptr: emacs_value,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ),
  >,
  pub vec_get: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize) -> emacs_value,
  >,
  pub vec_set: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize, val: emacs_value),
  >,
  pub vec_size:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value) -> isize>,
  pub should_quit: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> bool>,
}
#[test]
fn bindgen_test_layout_emacs_env_26() {
  assert_eq!(
    ::std::mem::size_of::<emacs_env_26>(),
    240usize,
    concat!("Size of: ", stringify!(emacs_env_26))
  );
  assert_eq!(
    ::std::mem::align_of::<emacs_env_26>(),
    8usize,
    concat!("Alignment of ", stringify!(emacs_env_26))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).private_members as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(private_members)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_global_ref as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).free_global_ref as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(free_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_check as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_check)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_clear as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_clear)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_get as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_signal as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_signal)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_throw as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_throw)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_function as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_function)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).funcall as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(funcall)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).intern as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(intern)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).type_of as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(type_of)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).is_not_nil as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(is_not_nil)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).eq as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(eq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).extract_integer as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(extract_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_integer as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).extract_float as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(extract_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_float as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).copy_string_contents as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(copy_string_contents)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_string as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_string)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_user_ptr as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).get_user_ptr as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(get_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).set_user_ptr as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(set_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).get_user_finalizer as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(get_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).set_user_finalizer as *const _ as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(set_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).vec_get as *const _ as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(vec_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).vec_set as *const _ as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(vec_set)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).vec_size as *const _ as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(vec_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).should_quit as *const _ as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(should_quit)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_27 {
  pub size: isize,
  pub private_members: *mut emacs_env_private,
  pub make_global_ref: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, any_reference: emacs_value) -> emacs_value,
  >,
  pub free_global_ref:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, global_reference: emacs_value)>,
  pub non_local_exit_check:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
  pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
  pub non_local_exit_get: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      non_local_exit_symbol_out: *mut emacs_value,
      non_local_exit_data_out: *mut emacs_value,
    ) -> emacs_funcall_exit,
  >,
  pub non_local_exit_signal: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      non_local_exit_symbol: emacs_value,
      non_local_exit_data: emacs_value,
    ),
  >,
  pub non_local_exit_throw: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
  >,
  pub make_function: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      min_arity: isize,
      max_arity: isize,
      function: ::std::option::Option<
        unsafe extern "C" fn(
          env: *mut emacs_env,
          nargs: isize,
          args: *mut emacs_value,
          arg1: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
      >,
      documentation: *const ::std::os::raw::c_char,
      data: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub funcall: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      function: emacs_value,
      nargs: isize,
      args: *mut emacs_value,
    ) -> emacs_value,
  >,
  pub intern: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      symbol_name: *const ::std::os::raw::c_char,
    ) -> emacs_value,
  >,
  pub type_of: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
  >,
  pub is_not_nil:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> bool>,
  pub eq: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
  >,
  pub extract_integer: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> intmax_t,
  >,
  pub make_integer: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: intmax_t) -> emacs_value,
  >,
  pub extract_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> f64>,
  pub make_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: f64) -> emacs_value>,
  pub copy_string_contents: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      value: emacs_value,
      buffer: *mut ::std::os::raw::c_char,
      size_inout: *mut isize,
    ) -> bool,
  >,
  pub make_string: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      contents: *const ::std::os::raw::c_char,
      length: isize,
    ) -> emacs_value,
  >,
  pub make_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
      ptr: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub get_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value) -> *mut ::std::os::raw::c_void,
  >,
  pub set_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value, ptr: *mut ::std::os::raw::c_void),
  >,
  pub get_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      env: *mut emacs_env,
      uptr: emacs_value,
    ) -> ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        env: *mut emacs_env,
        uptr: emacs_value,
      ),
    >,
  >,
  pub set_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      uptr: emacs_value,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ),
  >,
  pub vec_get: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize) -> emacs_value,
  >,
  pub vec_set: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize, val: emacs_value),
  >,
  pub vec_size:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value) -> isize>,
  pub should_quit: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> bool>,
  pub process_input:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_process_input_result>,
  pub extract_time: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> timespec,
  >,
  pub make_time:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, time: timespec) -> emacs_value>,
  pub extract_big_integer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      arg: emacs_value,
      sign: *mut ::std::os::raw::c_int,
      count: *mut isize,
      magnitude: *mut emacs_limb_t,
    ) -> bool,
  >,
  pub make_big_integer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      sign: ::std::os::raw::c_int,
      count: isize,
      magnitude: *const emacs_limb_t,
    ) -> emacs_value,
  >,
}
#[test]
fn bindgen_test_layout_emacs_env_27() {
  assert_eq!(
    ::std::mem::size_of::<emacs_env_27>(),
    280usize,
    concat!("Size of: ", stringify!(emacs_env_27))
  );
  assert_eq!(
    ::std::mem::align_of::<emacs_env_27>(),
    8usize,
    concat!("Alignment of ", stringify!(emacs_env_27))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).private_members as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(private_members)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_global_ref as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).free_global_ref as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(free_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_check as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_check)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_clear as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_clear)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_get as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_signal as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_signal)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_throw as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_throw)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_function as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_function)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).funcall as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(funcall)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).intern as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(intern)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).type_of as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(type_of)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).is_not_nil as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(is_not_nil)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).eq as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(eq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).extract_integer as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(extract_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_integer as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).extract_float as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(extract_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_float as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).copy_string_contents as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(copy_string_contents)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_string as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_string)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_user_ptr as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).get_user_ptr as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(get_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).set_user_ptr as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(set_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).get_user_finalizer as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(get_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).set_user_finalizer as *const _ as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(set_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).vec_get as *const _ as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(vec_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).vec_set as *const _ as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(vec_set)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).vec_size as *const _ as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(vec_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).should_quit as *const _ as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(should_quit)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).process_input as *const _ as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(process_input)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).extract_time as *const _ as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(extract_time)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_time as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_time)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).extract_big_integer as *const _ as usize },
    264usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(extract_big_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_big_integer as *const _ as usize },
    272usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_big_integer)
    )
  );
}
extern "C" {
  pub fn emacs_module_init(ert: *mut emacs_runtime) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_runtime_private {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_private {
  pub _address: u8,
}
