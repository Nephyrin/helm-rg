/* automatically generated by rust-bindgen 0.58.1 */

#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(dead_code)]

pub const EMACS_MAJOR_VERSION: u32 = 28;
pub const EMACS_LIMB_MAX: i32 = -1;
pub type size_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type intmax_t = __intmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
  pub tv_sec: __time_t,
  pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
  assert_eq!(
    ::std::mem::size_of::<timespec>(),
    16usize,
    concat!("Size of: ", stringify!(timespec))
  );
  assert_eq!(
    ::std::mem::align_of::<timespec>(),
    8usize,
    concat!("Alignment of ", stringify!(timespec))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(timespec),
      "::",
      stringify!(tv_sec)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(timespec),
      "::",
      stringify!(tv_nsec)
    )
  );
}
pub type emacs_env = emacs_env_28;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_value_tag {
  _unused: [u8; 0],
}
pub type emacs_value = *mut emacs_value_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_runtime {
  pub size: isize,
  pub private_members: *mut emacs_runtime_private,
  pub get_environment:
    ::std::option::Option<unsafe extern "C" fn(runtime: *mut emacs_runtime) -> *mut emacs_env>,
}
#[test]
fn bindgen_test_layout_emacs_runtime() {
  assert_eq!(
    ::std::mem::size_of::<emacs_runtime>(),
    24usize,
    concat!("Size of: ", stringify!(emacs_runtime))
  );
  assert_eq!(
    ::std::mem::align_of::<emacs_runtime>(),
    8usize,
    concat!("Alignment of ", stringify!(emacs_runtime))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_runtime>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_runtime),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_runtime>())).private_members as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_runtime),
      "::",
      stringify!(private_members)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_runtime>())).get_environment as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_runtime),
      "::",
      stringify!(get_environment)
    )
  );
}
pub type emacs_function = ::std::option::Option<
  unsafe extern "C" fn(
    env: *mut emacs_env,
    nargs: isize,
    args: *mut emacs_value,
    data: *mut ::std::os::raw::c_void,
  ) -> emacs_value,
>;
pub type emacs_finalizer =
  ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
pub const emacs_funcall_exit_emacs_funcall_exit_return: emacs_funcall_exit = 0;
pub const emacs_funcall_exit_emacs_funcall_exit_signal: emacs_funcall_exit = 1;
pub const emacs_funcall_exit_emacs_funcall_exit_throw: emacs_funcall_exit = 2;
pub type emacs_funcall_exit = ::std::os::raw::c_uint;
pub const emacs_process_input_result_emacs_process_input_continue: emacs_process_input_result = 0;
pub const emacs_process_input_result_emacs_process_input_quit: emacs_process_input_result = 1;
pub type emacs_process_input_result = ::std::os::raw::c_uint;
pub type emacs_limb_t = size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_25 {
  pub size: isize,
  pub private_members: *mut emacs_env_private,
  pub make_global_ref: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
  >,
  pub free_global_ref:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, global_value: emacs_value)>,
  pub non_local_exit_check:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
  pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
  pub non_local_exit_get: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      symbol: *mut emacs_value,
      data: *mut emacs_value,
    ) -> emacs_funcall_exit,
  >,
  pub non_local_exit_signal: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, symbol: emacs_value, data: emacs_value),
  >,
  pub non_local_exit_throw: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
  >,
  pub make_function: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      min_arity: isize,
      max_arity: isize,
      func: ::std::option::Option<
        unsafe extern "C" fn(
          env: *mut emacs_env,
          nargs: isize,
          args: *mut emacs_value,
          data: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
      >,
      docstring: *const ::std::os::raw::c_char,
      data: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub funcall: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      func: emacs_value,
      nargs: isize,
      args: *mut emacs_value,
    ) -> emacs_value,
  >,
  pub intern: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, name: *const ::std::os::raw::c_char) -> emacs_value,
  >,
  pub type_of: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> emacs_value,
  >,
  pub is_not_nil:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> bool>,
  pub eq: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
  >,
  pub extract_integer:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> intmax_t>,
  pub make_integer:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, n: intmax_t) -> emacs_value>,
  pub extract_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> f64>,
  pub make_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, d: f64) -> emacs_value>,
  pub copy_string_contents: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      value: emacs_value,
      buf: *mut ::std::os::raw::c_char,
      len: *mut isize,
    ) -> bool,
  >,
  pub make_string: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      str_: *const ::std::os::raw::c_char,
      len: isize,
    ) -> emacs_value,
  >,
  pub make_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
      ptr: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub get_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> *mut ::std::os::raw::c_void,
  >,
  pub set_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value, ptr: *mut ::std::os::raw::c_void),
  >,
  pub get_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      env: *mut emacs_env,
      uptr: emacs_value,
    ) -> ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        env: *mut emacs_env,
        uptr: emacs_value,
      ),
    >,
  >,
  pub set_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      arg: emacs_value,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ),
  >,
  pub vec_get: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vector: emacs_value, index: isize) -> emacs_value,
  >,
  pub vec_set: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      vector: emacs_value,
      index: isize,
      value: emacs_value,
    ),
  >,
  pub vec_size:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vector: emacs_value) -> isize>,
}
#[test]
fn bindgen_test_layout_emacs_env_25() {
  assert_eq!(
    ::std::mem::size_of::<emacs_env_25>(),
    232usize,
    concat!("Size of: ", stringify!(emacs_env_25))
  );
  assert_eq!(
    ::std::mem::align_of::<emacs_env_25>(),
    8usize,
    concat!("Alignment of ", stringify!(emacs_env_25))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).private_members as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(private_members)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_global_ref as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).free_global_ref as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(free_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_check as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_check)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_clear as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_clear)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_get as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_signal as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_signal)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_throw as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(non_local_exit_throw)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_function as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_function)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).funcall as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(funcall)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).intern as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(intern)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).type_of as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(type_of)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).is_not_nil as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(is_not_nil)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).eq as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(eq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).extract_integer as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(extract_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_integer as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).extract_float as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(extract_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_float as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).copy_string_contents as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(copy_string_contents)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_string as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_string)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_user_ptr as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(make_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).get_user_ptr as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(get_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).set_user_ptr as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(set_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).get_user_finalizer as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(get_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).set_user_finalizer as *const _ as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(set_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_get as *const _ as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(vec_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_set as *const _ as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(vec_set)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_size as *const _ as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_25),
      "::",
      stringify!(vec_size)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_26 {
  pub size: isize,
  pub private_members: *mut emacs_env_private,
  pub make_global_ref: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
  >,
  pub free_global_ref:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, global_value: emacs_value)>,
  pub non_local_exit_check:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
  pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
  pub non_local_exit_get: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      symbol: *mut emacs_value,
      data: *mut emacs_value,
    ) -> emacs_funcall_exit,
  >,
  pub non_local_exit_signal: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, symbol: emacs_value, data: emacs_value),
  >,
  pub non_local_exit_throw: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
  >,
  pub make_function: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      min_arity: isize,
      max_arity: isize,
      func: ::std::option::Option<
        unsafe extern "C" fn(
          env: *mut emacs_env,
          nargs: isize,
          args: *mut emacs_value,
          data: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
      >,
      docstring: *const ::std::os::raw::c_char,
      data: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub funcall: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      func: emacs_value,
      nargs: isize,
      args: *mut emacs_value,
    ) -> emacs_value,
  >,
  pub intern: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, name: *const ::std::os::raw::c_char) -> emacs_value,
  >,
  pub type_of: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> emacs_value,
  >,
  pub is_not_nil:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> bool>,
  pub eq: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
  >,
  pub extract_integer:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> intmax_t>,
  pub make_integer:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, n: intmax_t) -> emacs_value>,
  pub extract_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> f64>,
  pub make_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, d: f64) -> emacs_value>,
  pub copy_string_contents: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      value: emacs_value,
      buf: *mut ::std::os::raw::c_char,
      len: *mut isize,
    ) -> bool,
  >,
  pub make_string: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      str_: *const ::std::os::raw::c_char,
      len: isize,
    ) -> emacs_value,
  >,
  pub make_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
      ptr: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub get_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> *mut ::std::os::raw::c_void,
  >,
  pub set_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value, ptr: *mut ::std::os::raw::c_void),
  >,
  pub get_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      env: *mut emacs_env,
      uptr: emacs_value,
    ) -> ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        env: *mut emacs_env,
        uptr: emacs_value,
      ),
    >,
  >,
  pub set_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      arg: emacs_value,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ),
  >,
  pub vec_get: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vector: emacs_value, index: isize) -> emacs_value,
  >,
  pub vec_set: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      vector: emacs_value,
      index: isize,
      value: emacs_value,
    ),
  >,
  pub vec_size:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vector: emacs_value) -> isize>,
  pub should_quit: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> bool>,
}
#[test]
fn bindgen_test_layout_emacs_env_26() {
  assert_eq!(
    ::std::mem::size_of::<emacs_env_26>(),
    240usize,
    concat!("Size of: ", stringify!(emacs_env_26))
  );
  assert_eq!(
    ::std::mem::align_of::<emacs_env_26>(),
    8usize,
    concat!("Alignment of ", stringify!(emacs_env_26))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).private_members as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(private_members)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_global_ref as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).free_global_ref as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(free_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_check as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_check)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_clear as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_clear)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_get as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_signal as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_signal)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_throw as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(non_local_exit_throw)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_function as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_function)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).funcall as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(funcall)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).intern as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(intern)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).type_of as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(type_of)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).is_not_nil as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(is_not_nil)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).eq as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(eq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).extract_integer as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(extract_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_integer as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).extract_float as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(extract_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_float as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).copy_string_contents as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(copy_string_contents)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_string as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_string)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_user_ptr as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(make_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).get_user_ptr as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(get_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).set_user_ptr as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(set_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).get_user_finalizer as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(get_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).set_user_finalizer as *const _ as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(set_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).vec_get as *const _ as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(vec_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).vec_set as *const _ as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(vec_set)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).vec_size as *const _ as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(vec_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_26>())).should_quit as *const _ as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_26),
      "::",
      stringify!(should_quit)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_27 {
  pub size: isize,
  pub private_members: *mut emacs_env_private,
  pub make_global_ref: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
  >,
  pub free_global_ref:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, global_value: emacs_value)>,
  pub non_local_exit_check:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
  pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
  pub non_local_exit_get: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      symbol: *mut emacs_value,
      data: *mut emacs_value,
    ) -> emacs_funcall_exit,
  >,
  pub non_local_exit_signal: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, symbol: emacs_value, data: emacs_value),
  >,
  pub non_local_exit_throw: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
  >,
  pub make_function: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      min_arity: isize,
      max_arity: isize,
      func: ::std::option::Option<
        unsafe extern "C" fn(
          env: *mut emacs_env,
          nargs: isize,
          args: *mut emacs_value,
          data: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
      >,
      docstring: *const ::std::os::raw::c_char,
      data: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub funcall: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      func: emacs_value,
      nargs: isize,
      args: *mut emacs_value,
    ) -> emacs_value,
  >,
  pub intern: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, name: *const ::std::os::raw::c_char) -> emacs_value,
  >,
  pub type_of: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> emacs_value,
  >,
  pub is_not_nil:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> bool>,
  pub eq: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
  >,
  pub extract_integer:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> intmax_t>,
  pub make_integer:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, n: intmax_t) -> emacs_value>,
  pub extract_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> f64>,
  pub make_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, d: f64) -> emacs_value>,
  pub copy_string_contents: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      value: emacs_value,
      buf: *mut ::std::os::raw::c_char,
      len: *mut isize,
    ) -> bool,
  >,
  pub make_string: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      str_: *const ::std::os::raw::c_char,
      len: isize,
    ) -> emacs_value,
  >,
  pub make_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
      ptr: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub get_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> *mut ::std::os::raw::c_void,
  >,
  pub set_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value, ptr: *mut ::std::os::raw::c_void),
  >,
  pub get_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      env: *mut emacs_env,
      uptr: emacs_value,
    ) -> ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        env: *mut emacs_env,
        uptr: emacs_value,
      ),
    >,
  >,
  pub set_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      arg: emacs_value,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ),
  >,
  pub vec_get: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vector: emacs_value, index: isize) -> emacs_value,
  >,
  pub vec_set: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      vector: emacs_value,
      index: isize,
      value: emacs_value,
    ),
  >,
  pub vec_size:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vector: emacs_value) -> isize>,
  pub should_quit: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> bool>,
  pub process_input:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_process_input_result>,
  pub extract_time:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> timespec>,
  pub make_time:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, time: timespec) -> emacs_value>,
  pub extract_big_integer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      arg: emacs_value,
      sign: *mut ::std::os::raw::c_int,
      count: *mut isize,
      magnitude: *mut emacs_limb_t,
    ) -> bool,
  >,
  pub make_big_integer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      sign: ::std::os::raw::c_int,
      count: isize,
      magnitude: *const emacs_limb_t,
    ) -> emacs_value,
  >,
}
#[test]
fn bindgen_test_layout_emacs_env_27() {
  assert_eq!(
    ::std::mem::size_of::<emacs_env_27>(),
    280usize,
    concat!("Size of: ", stringify!(emacs_env_27))
  );
  assert_eq!(
    ::std::mem::align_of::<emacs_env_27>(),
    8usize,
    concat!("Alignment of ", stringify!(emacs_env_27))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).private_members as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(private_members)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_global_ref as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).free_global_ref as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(free_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_check as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_check)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_clear as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_clear)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_get as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_signal as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_signal)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).non_local_exit_throw as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(non_local_exit_throw)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_function as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_function)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).funcall as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(funcall)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).intern as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(intern)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).type_of as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(type_of)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).is_not_nil as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(is_not_nil)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).eq as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(eq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).extract_integer as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(extract_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_integer as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).extract_float as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(extract_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_float as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).copy_string_contents as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(copy_string_contents)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_string as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_string)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_user_ptr as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).get_user_ptr as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(get_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).set_user_ptr as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(set_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).get_user_finalizer as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(get_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).set_user_finalizer as *const _ as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(set_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).vec_get as *const _ as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(vec_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).vec_set as *const _ as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(vec_set)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).vec_size as *const _ as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(vec_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).should_quit as *const _ as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(should_quit)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).process_input as *const _ as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(process_input)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).extract_time as *const _ as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(extract_time)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_time as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_time)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).extract_big_integer as *const _ as usize },
    264usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(extract_big_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_27>())).make_big_integer as *const _ as usize },
    272usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_27),
      "::",
      stringify!(make_big_integer)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_28 {
  pub size: isize,
  pub private_members: *mut emacs_env_private,
  pub make_global_ref: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
  >,
  pub free_global_ref:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, global_value: emacs_value)>,
  pub non_local_exit_check:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
  pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
  pub non_local_exit_get: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      symbol: *mut emacs_value,
      data: *mut emacs_value,
    ) -> emacs_funcall_exit,
  >,
  pub non_local_exit_signal: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, symbol: emacs_value, data: emacs_value),
  >,
  pub non_local_exit_throw: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
  >,
  pub make_function: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      min_arity: isize,
      max_arity: isize,
      func: ::std::option::Option<
        unsafe extern "C" fn(
          env: *mut emacs_env,
          nargs: isize,
          args: *mut emacs_value,
          data: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
      >,
      docstring: *const ::std::os::raw::c_char,
      data: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub funcall: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      func: emacs_value,
      nargs: isize,
      args: *mut emacs_value,
    ) -> emacs_value,
  >,
  pub intern: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, name: *const ::std::os::raw::c_char) -> emacs_value,
  >,
  pub type_of: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> emacs_value,
  >,
  pub is_not_nil:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> bool>,
  pub eq: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
  >,
  pub extract_integer:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> intmax_t>,
  pub make_integer:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, n: intmax_t) -> emacs_value>,
  pub extract_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> f64>,
  pub make_float:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, d: f64) -> emacs_value>,
  pub copy_string_contents: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      value: emacs_value,
      buf: *mut ::std::os::raw::c_char,
      len: *mut isize,
    ) -> bool,
  >,
  pub make_string: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      str_: *const ::std::os::raw::c_char,
      len: isize,
    ) -> emacs_value,
  >,
  pub make_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
      ptr: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
  >,
  pub get_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> *mut ::std::os::raw::c_void,
  >,
  pub set_user_ptr: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value, ptr: *mut ::std::os::raw::c_void),
  >,
  pub get_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      env: *mut emacs_env,
      uptr: emacs_value,
    ) -> ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        env: *mut emacs_env,
        uptr: emacs_value,
      ),
    >,
  >,
  pub set_user_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      arg: emacs_value,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ),
  >,
  pub vec_get: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, vector: emacs_value, index: isize) -> emacs_value,
  >,
  pub vec_set: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      vector: emacs_value,
      index: isize,
      value: emacs_value,
    ),
  >,
  pub vec_size:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vector: emacs_value) -> isize>,
  pub should_quit: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> bool>,
  pub process_input:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_process_input_result>,
  pub extract_time:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, arg: emacs_value) -> timespec>,
  pub make_time:
    ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, time: timespec) -> emacs_value>,
  pub extract_big_integer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      arg: emacs_value,
      sign: *mut ::std::os::raw::c_int,
      count: *mut isize,
      magnitude: *mut emacs_limb_t,
    ) -> bool,
  >,
  pub make_big_integer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      sign: ::std::os::raw::c_int,
      count: isize,
      magnitude: *const emacs_limb_t,
    ) -> emacs_value,
  >,
  pub get_function_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      env: *mut emacs_env,
      arg: emacs_value,
    ) -> ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        env: *mut emacs_env,
        arg: emacs_value,
      ),
    >,
  >,
  pub set_function_finalizer: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      arg: emacs_value,
      fin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ),
  >,
  pub open_channel: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, pipe_process: emacs_value) -> ::std::os::raw::c_int,
  >,
  pub make_interactive: ::std::option::Option<
    unsafe extern "C" fn(env: *mut emacs_env, function: emacs_value, spec: emacs_value),
  >,
  pub make_unibyte_string: ::std::option::Option<
    unsafe extern "C" fn(
      env: *mut emacs_env,
      str_: *const ::std::os::raw::c_char,
      len: isize,
    ) -> emacs_value,
  >,
}
#[test]
fn bindgen_test_layout_emacs_env_28() {
  assert_eq!(
    ::std::mem::size_of::<emacs_env_28>(),
    320usize,
    concat!("Size of: ", stringify!(emacs_env_28))
  );
  assert_eq!(
    ::std::mem::align_of::<emacs_env_28>(),
    8usize,
    concat!("Alignment of ", stringify!(emacs_env_28))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).private_members as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(private_members)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_global_ref as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).free_global_ref as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(free_global_ref)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).non_local_exit_check as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(non_local_exit_check)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).non_local_exit_clear as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(non_local_exit_clear)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).non_local_exit_get as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(non_local_exit_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).non_local_exit_signal as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(non_local_exit_signal)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).non_local_exit_throw as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(non_local_exit_throw)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_function as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_function)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).funcall as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(funcall)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).intern as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(intern)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).type_of as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(type_of)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).is_not_nil as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(is_not_nil)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).eq as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(eq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).extract_integer as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(extract_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_integer as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).extract_float as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(extract_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_float as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_float)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).copy_string_contents as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(copy_string_contents)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_string as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_string)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_user_ptr as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).get_user_ptr as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(get_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).set_user_ptr as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(set_user_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).get_user_finalizer as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(get_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).set_user_finalizer as *const _ as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(set_user_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).vec_get as *const _ as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(vec_get)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).vec_set as *const _ as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(vec_set)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).vec_size as *const _ as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(vec_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).should_quit as *const _ as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(should_quit)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).process_input as *const _ as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(process_input)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).extract_time as *const _ as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(extract_time)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_time as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_time)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).extract_big_integer as *const _ as usize },
    264usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(extract_big_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_big_integer as *const _ as usize },
    272usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_big_integer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).get_function_finalizer as *const _ as usize },
    280usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(get_function_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).set_function_finalizer as *const _ as usize },
    288usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(set_function_finalizer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).open_channel as *const _ as usize },
    296usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(open_channel)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_interactive as *const _ as usize },
    304usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_interactive)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<emacs_env_28>())).make_unibyte_string as *const _ as usize },
    312usize,
    concat!(
      "Offset of field: ",
      stringify!(emacs_env_28),
      "::",
      stringify!(make_unibyte_string)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_runtime_private {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_private {
  pub _address: u8,
}
